/**
 * "Compiled" implementation of modified MobileNet
 */
class NanoMobileNet {
public:
    const uint16_t numInputs = 9216;
    const uint16_t numOutputs = 5;
    float outputs[5];
    float arena[14406];
    uint16_t output;
    float proba;

    /**
     *
     */
    NanoMobileNet() : output(0), proba(0) {
        for (uint16_t i = 0; i < numOutputs; i++)
            outputs[i] = 0;
    }

    /**
     *
     * @param input
     */
    uint16_t predict(float *input) {
        float *ping = arena;
        float *pong = arena + 7203;

        // conv2d (0)
        for (int16_t d = 0; d < 3; d++)
            this->conv2d_3x3x1(input, ping + 47 * 47 * d, conv2d_0_weights[d], 96, 2);

        
            
            // padding (1)
            for (int16_t d = 0; d < 3; d++)
                this->pad(ping + 47 * 47 * d, pong + 49 * 49 * d, 47);

            memcpy(ping, pong, sizeof(float) * 49 * 49 * 3);
            

            // depthwise (1)
            for (int16_t d = 0; d < 3; d++)
                this->depthwise_conv(ping + 49 * 49 * d, pong + 24 * 24 * d, depthwise_1_weights[d], 49, 2);

            // pointwise (1)
            for (int16_t d = 0; d < 6; d++)
                this->pointwise_conv(pong, ping + 24 * 24 * d, pointwise_1_weights[d], 24, 3);
        
            
            // padding (2)
            for (int16_t d = 0; d < 6; d++)
                this->pad(ping + 24 * 24 * d, pong + 26 * 26 * d, 24);

            memcpy(ping, pong, sizeof(float) * 26 * 26 * 6);
            

            // depthwise (2)
            for (int16_t d = 0; d < 6; d++)
                this->depthwise_conv(ping + 26 * 26 * d, pong + 12 * 12 * d, depthwise_2_weights[d], 26, 2);

            // pointwise (2)
            for (int16_t d = 0; d < 12; d++)
                this->pointwise_conv(pong, ping + 12 * 12 * d, pointwise_2_weights[d], 12, 6);
        
            
            // padding (3)
            for (int16_t d = 0; d < 12; d++)
                this->pad(ping + 12 * 12 * d, pong + 14 * 14 * d, 12);

            memcpy(ping, pong, sizeof(float) * 14 * 14 * 12);
            

            // depthwise (3)
            for (int16_t d = 0; d < 12; d++)
                this->depthwise_conv(ping + 14 * 14 * d, pong + 6 * 6 * d, depthwise_3_weights[d], 14, 2);

            // pointwise (3)
            for (int16_t d = 0; d < 24; d++)
                this->pointwise_conv(pong, ping + 6 * 6 * d, pointwise_3_weights[d], 6, 12);
        
            
            // padding (4)
            for (int16_t d = 0; d < 24; d++)
                this->pad(ping + 6 * 6 * d, pong + 8 * 8 * d, 6);

            memcpy(ping, pong, sizeof(float) * 8 * 8 * 24);
            

            // depthwise (4)
            for (int16_t d = 0; d < 24; d++)
                this->depthwise_conv(ping + 8 * 8 * d, pong + 3 * 3 * d, depthwise_4_weights[d], 8, 2);

            // pointwise (4)
            for (int16_t d = 0; d < 24; d++)
                this->pointwise_conv(pong, ping + 3 * 3 * d, pointwise_4_weights[d], 3, 24);
        

        this->maxpool(ping, pong, 3, 24);

        for (uint16_t d = 0; d < numOutputs; d++)
            this->dot(pong, ping + d, conv2d_last_weights[d], conv2d_last_bias[d], 24);

        this->softmax(ping, outputs, numOutputs);

        return this->argmax();
    }

    /**
 * Get index of max output
 */
uint16_t argmax() {
    this->output = 0;
    this->proba = outputs[0];

    for (uint16_t i = 1; i < numOutputs; i++) {
        if (outputs[i] > this->proba) {
            this->proba = outputs[i];
            this->output = i;
        }
    }

    return this->output;
}

protected:
    const float conv2d_0_weights[3][9] = {{0.37625214458, 0.15655188262, 0.24150779843, -0.11067947000, 0.29452094436, -0.13835363090, -0.06237651408, -0.38278493285, -0.30617496371},
{-0.37473875284, 0.39131873846, -0.07265199721, 0.15585649014, 0.17716513574, -0.11386792362, 0.50162839890, -0.12081064284, 0.13264970481},
{0.25901430845, 0.20822665095, 0.26515159011, 0.10161444545, 0.06042228639, -0.12140165269, 0.23866307735, 0.05981071293, 0.22084888816}};
    
    const float depthwise_1_weights[3][9] = {{-0.18051339686, 0.13787733018, -0.13999150693, -0.23438464105, -0.10169196129, 0.02225255780, 0.18168434501, -0.24024219811, -0.24298655987},
{-0.00048004370, -0.49412208796, -0.36504480243, 0.32344469428, -0.01962396316, -0.33956536651, -0.78711760044, -0.19451393187, 0.12172897905},
{0.38217854500, 0.19981345534, 0.03695305437, -0.09305436909, -0.25406265259, 0.22034405172, -0.37170940638, -0.41508650780, -0.42356777191}};
    const float pointwise_1_weights[6][3] = {{-0.40892189741, -1.31624877453, 1.02735614777},
{0.65987205505, 0.05922468379, 0.37645572424},
{0.36929208040, 0.18366645277, 0.03957126290},
{0.48182511330, 0.97511726618, -0.00295109348},
{0.25386339426, -0.50966000557, 0.75678694248},
{0.78715491295, -0.62227284908, -0.39904612303}};
    
    const float depthwise_2_weights[6][9] = {{-0.31137901545, 0.34039738774, 0.03561884910, 0.46838271618, 0.16772468388, 0.13108682632, -0.35534390807, 0.54911655188, -0.33674311638},
{-0.09882023185, -0.03398990259, -0.35991409421, 0.74748671055, -0.29144108295, 0.05895018578, 0.46511450410, 0.01283403672, -0.06023146957},
{0.14598752558, -0.13825097680, 0.31674239039, 0.27547594905, -0.30125814676, 0.13320575655, 0.48684668541, 0.39876157045, 0.15047405660},
{-0.02837126702, 0.32106205821, 0.25167816877, 0.54769343138, 0.15686649084, 0.34660393000, -0.25029948354, 0.64254432917, 0.65386652946},
{0.48338699341, 0.17045702040, -0.03478083014, -0.14497223496, 0.36591520905, 0.23626960814, 0.29466378689, 0.44178542495, 0.53304928541},
{0.45962059498, 0.00055682258, 0.00549752591, 0.33192211390, 0.49922284484, 0.12309208512, 0.00780812930, -0.10902544111, 0.39253431559}};
    const float pointwise_2_weights[12][6] = {{-0.02847968228, -0.86747771502, 0.37802967429, -0.33116418123, 0.94811934233, -1.06772136688},
{0.59928297997, -0.25783523917, 0.30871257186, -0.40610167384, 0.59509372711, -0.11682565510},
{0.70554155111, 0.03757039458, 0.31024926901, 0.39550286531, 0.06713416427, -0.60933977365},
{-0.19948428869, -0.28273040056, -0.18345358968, -0.43417638540, -0.47587350011, -0.08791247010},
{-0.42762494087, -0.07655025274, 0.69942772388, 0.64563834667, 0.45127388835, -0.01057577506},
{0.05207816511, 0.19533780217, -0.24809060991, 0.46725195646, 0.19149369001, 0.49052479863},
{-0.01250142418, -0.08186859637, 0.37585249543, -0.47883918881, -0.10801985115, 0.76624184847},
{-0.70407134295, 0.27259671688, -0.07739021629, 0.57168829441, 0.75605648756, 0.05732904002},
{0.61745542288, 0.61346369982, -0.48931470513, -0.36763292551, -0.57757139206, 0.72086262703},
{0.75830769539, -0.45330247283, 0.07340705395, -0.24587024748, 0.43198776245, 0.60059839487},
{-1.38079285622, 0.84703034163, 0.40675917268, -0.33414736390, 0.50822448730, 0.40022379160},
{0.05453081802, 0.10354320705, 0.16770315170, 0.15726561844, 0.81859391928, -0.29480889440}};
    
    const float depthwise_3_weights[12][9] = {{-0.72786569595, -0.21414761245, -0.67352861166, 0.29297575355, -0.00089195947, -0.56571090221, 0.42100343108, -0.02331785485, -0.37428370118},
{-0.14689953625, 0.36552160978, 0.39542135596, 0.49021455646, 0.51584792137, 0.50961351395, 0.19151645899, 0.28216198087, -0.03593771532},
{-0.06838068366, -0.25059610605, 0.65227174759, 0.23026743531, 0.49988600612, 0.40398845077, -0.18715415895, -0.44900459051, -0.18581196666},
{0.19080670178, -0.01936511695, -0.13217654824, -0.16309006512, 0.03863666952, 0.04017876089, 0.04535068572, 0.20590259135, 0.12171451747},
{0.46555328369, 0.30370929837, 0.23561710119, -0.26701676846, 0.21170693636, -0.00709496718, -0.30793893337, 0.04150950909, -0.09186647832},
{0.11838868260, 0.09678700566, 0.12591062486, 0.08568591624, 0.46230864525, 0.51358503103, -0.16451469064, 0.17069774866, 0.32370880246},
{0.19177754223, 0.14744685590, -0.24936249852, -0.04944093898, 0.65414029360, 0.12562392652, 0.41901984811, -0.15873290598, 0.06873536855},
{0.42564508319, -0.14876596630, -0.71544581652, 0.30681860447, 0.35426223278, -0.25471985340, 0.06662101299, -0.06577860564, -0.18868184090},
{-0.35706147552, -0.59924417734, -0.29862433672, 0.48692032695, 0.42086318135, 0.42923563719, 0.34545779228, -0.20052435994, 0.02868668549},
{0.42964389920, -0.07727906853, 0.47821795940, 0.24468936026, -0.30384770036, -0.52482432127, -0.39699286222, 0.22453410923, 0.30316537619},
{0.44630801678, -0.03881048039, -0.18835525215, 0.33045491576, -0.27084097266, -0.05119760707, 0.41547486186, -0.11911350489, -0.55787253380},
{0.12844891846, -0.38484722376, -0.07382079959, -0.27401924133, -0.36086153984, -0.16395275295, 0.33985954523, 0.54341101646, 0.15368722379}};
    const float pointwise_3_weights[24][12] = {{-0.36024013162, -0.43474382162, -0.27772295475, -0.06091988087, 0.21242991090, 0.82980763912, -0.32124304771, 0.20967057347, 0.41060274839, -0.98005831242, -0.51242727041, 0.42152455449},
{-0.17058226466, 0.94480693340, -0.12208495289, 0.29279392958, -0.01622696035, -0.05976939201, 0.00781311374, -0.19781135023, -0.07882461697, -0.10860547423, 0.40337640047, -0.31476625800},
{0.13925550878, 0.20941413939, -0.82201141119, -0.10697558522, -0.14281664789, 0.46052351594, 0.52171468735, 0.18391022086, 0.53573405743, -0.47815304995, -0.38758799434, 0.47543931007},
{0.18070967495, -0.29448893666, -0.18941253424, -0.15753611922, 0.44923236966, -0.17438478768, 0.09182750434, 0.55146116018, 0.11809425801, -0.40641623735, 0.55971860886, 0.18101941049},
{0.74786788225, 0.63335710764, -0.02586862631, -0.38739010692, 0.02339434996, 0.21432711184, 0.62947189808, 0.26290181279, 0.11322397739, 0.39317491651, 0.02601083182, 0.16975367069},
{0.19075797498, -0.47299277782, 0.30128943920, 0.06815034151, -0.78350490332, 0.01526540611, 0.67028003931, 0.62253814936, 0.25570881367, -0.01441211812, -0.06041091681, 0.19565586746},
{-0.62172895670, 0.29333606362, 0.51672554016, 0.02536144853, -0.10740415752, 0.22024711967, -0.26643013954, -0.90818977356, 0.03169999272, 0.08686990291, -0.14551407099, 0.55889159441},
{-0.70868045092, 0.07287172973, -0.27206194401, -0.31565031409, -0.51050126553, 0.71402972937, 0.40512490273, -0.57139939070, 0.39768677950, 0.25942435861, -0.29931220412, 0.40105187893},
{-0.26718500257, -0.01005185768, 0.55984514952, 0.33904600143, -0.40917631984, -0.01586211286, 0.00791646447, -0.30791929364, 1.01192462444, 0.57140070200, -0.07201371342, 0.29684165120},
{-1.04173016548, -0.05159896240, 0.29021453857, -0.21330878139, 0.33580973744, 0.25960907340, 0.57352930307, 0.50244575739, -0.27099213004, 0.21711155772, 0.16985930502, -0.14097367227},
{0.19795539975, -0.84265297651, 0.61182248592, 0.35960137844, -0.21878845990, 0.48586085439, 0.07837025076, -0.44342765212, -0.08460999280, 0.38606894016, 0.47882255912, 0.14406241477},
{0.78349316120, 0.19362197816, 0.07229108363, -0.29459521174, -0.11171302199, 0.67838877439, 0.14369173348, 1.14038825035, -0.50218337774, 0.34759348631, 0.52985686064, 0.03693788126},
{-0.76143288612, -0.19337330759, 0.38347151875, 0.01673200727, -0.44723355770, -0.02735808678, -0.20439261198, -0.25783973932, 0.61499196291, 0.00719938241, -0.32279124856, 0.60889804363},
{-0.56231892109, -0.06614315510, 0.42482003570, -0.24426031113, 0.52541011572, 0.54022735357, -0.05647249892, 0.15508852899, -0.12262917310, -0.24486039579, 0.08214370906, 0.07459767908},
{-0.11906853318, -1.08108651638, -0.08652194589, -0.32964879274, -0.12170025706, -0.08731438965, -0.07663202286, 0.73314833641, -0.44764032960, -0.52615290880, 0.59818929434, -0.25353154540},
{1.51818084717, 0.63588410616, -0.06509683281, 0.15800869465, 0.48965495825, 0.30385291576, -0.06414562464, 0.88025265932, -0.08043915033, 0.17172017694, 0.20712341368, -0.57426965237},
{-0.00816602539, -0.35248532891, 0.48426148295, -0.06232196093, 0.37059241533, -0.11033941060, -0.23281627893, 0.53624343872, 0.42102846503, 0.23228251934, -0.47209182382, 0.36611899734},
{0.38098603487, 0.04685520381, 0.25336524844, -0.02956742048, 0.18673159182, -0.18279133737, -0.07371269912, -0.24005980790, 0.43054589629, -0.40969225764, 0.76375162601, -0.20336797833},
{-0.83968484402, 0.51889830828, 0.05458067358, 0.25447696447, -0.10786064714, -0.51254349947, -0.29192855954, 0.26653736830, 0.25482460856, -0.18764026463, -0.18429741263, 0.25873929262},
{0.38670122623, -0.30063557625, -0.37875661254, 0.40784317255, 0.47230979800, 0.55792129040, 0.34215834737, -0.09149706364, -0.87988102436, 0.23975397646, -0.24054908752, -0.05134933814},
{-0.51121306419, -0.30146858096, -0.11532412469, 0.06943514943, -0.98392200470, -0.35535877943, 0.30983075500, -0.97212624550, 0.44753509760, -0.25482919812, -0.92048472166, 0.72282809019},
{-0.18115986884, -1.38689446449, -0.10304509103, -0.25169450045, -0.22001518309, 0.11799476296, -0.65225720406, 0.57605767250, 0.18713667989, -0.83633804321, 0.41019135714, 0.22361969948},
{0.71072751284, 0.80569404364, 0.52243334055, 0.07346886396, 0.03433282673, -0.01335554570, -0.26267698407, 0.29193463922, -0.06474963576, 0.34096255898, 0.02751690894, -0.27608993649},
{0.17579266429, 0.41068077087, -0.45226252079, -0.06003588438, -0.21689371765, 0.10231902450, -0.09077521414, 0.44309222698, 0.38043951988, -0.16178241372, 0.85070592165, 0.51776784658}};
    
    const float depthwise_4_weights[24][9] = {{0.18981817365, 0.46676960588, -0.58925300837, 0.00427807588, 0.01224947255, -0.10817480087, -0.33273598552, -0.07057909667, -0.03110576794},
{-0.31804499030, -0.16111499071, 0.32000136375, 0.44791242480, -0.05225249752, 0.39279073477, 0.18595036864, 0.60688126087, 0.06642932445},
{-0.21106243134, -0.13501197100, -0.30722612143, 0.13640768826, -0.52763468027, -0.08355214447, 0.41991743445, 0.19706526399, 0.20111708343},
{0.38163840771, 0.46335497499, -0.09819848090, -0.10272863507, 0.39689239860, 0.54849302769, -0.29199749231, -0.09909025580, -0.42902359366},
{-0.37612628937, -0.39291140437, -0.23353862762, -0.56063246727, -0.05396448448, -0.04650707915, 0.13245905936, 0.12858103216, 0.48955503106},
{0.09997260571, 0.64662742615, 0.35334149003, -0.04743432626, -0.27889826894, -0.21954987943, -0.18279206753, -1.03282606602, -0.00819432642},
{-0.31279623508, 0.55302876234, 0.18697035313, -0.51414167881, -0.36397933960, -0.02017055824, 0.40521979332, 0.26792162657, 0.06169852987},
{-0.45237109065, -0.07272376120, 0.11347132921, -0.35545006394, -0.29414716363, 0.39433306456, 0.20846450329, -0.08043443412, 0.40049472451},
{0.23819540441, -0.28447884321, 0.21913538873, 0.22072808444, -0.23227117956, -0.44826972485, 0.41381487250, -0.08834498376, 0.37741434574},
{0.24902619421, 0.13594080508, -0.25029039383, 0.35986232758, -0.19862523675, -0.25201827288, 0.04966995120, 0.55136060715, 0.08546662331},
{0.18169528246, -0.13119184971, 0.45574161410, 0.42879205942, 0.54744076729, 0.22082319856, -0.01034010295, 0.46910664439, 0.04795633256},
{0.08368705958, 0.25590664148, 0.30139991641, 0.00334493304, -0.08968989551, -0.94578957558, 0.02608845569, 0.13219825923, -0.34706735611},
{0.13874584436, -2.05583477020, 0.20278520882, 0.41645807028, 0.06544604152, -1.24718821049, 0.11564800143, 0.08106229454, 0.36842009425},
{-0.22995041311, -0.02162999846, 0.36066693068, -0.19041585922, 0.27920597792, 0.23188440502, -0.26885315776, 0.06147032976, 0.21792860329},
{0.05998030677, 0.31235274673, 0.46806392074, -0.93906849623, 0.20626039803, 0.58520478010, 0.14828266203, 0.50560492277, 0.76997280121},
{0.32765698433, -0.64957791567, -0.03613649681, -0.23600016534, 0.40710574389, -0.30642211437, -0.15463240445, 0.52857792377, 0.19674131274},
{-0.27183747292, 0.43939974904, 0.11576365680, 0.09889725596, 0.22200840712, 0.65832579136, 0.08171030879, 0.28989392519, -0.00398834096},
{-0.58208477497, -0.47124725580, 0.80552965403, 0.29257413745, -0.35952320695, 0.41555795074, 0.23360484838, 0.73589181900, 0.08082010597},
{-0.13649809361, 0.19603207707, -0.04467055947, 0.70164686441, -0.36024266481, -0.16838270426, 0.51053404808, 0.04706550017, 0.26547256112},
{0.44307973981, 0.10023259372, -0.17547537386, 0.19006788731, 0.09278056771, 0.32654792070, 0.26977428794, -0.33751764894, -0.32012486458},
{0.24064016342, -1.52185022831, -0.07947806269, -0.65656208992, 0.43022185564, -2.46842312813, -0.46937757730, 0.38787189126, 0.27972713113},
{0.32140231133, -0.54166692495, 0.74439221621, -0.20310088992, 0.18175072968, -0.13825944066, 0.57261335850, 0.45506671071, -0.68995535374},
{0.02593314834, 0.34748578072, 0.26703533530, 0.23877577484, -0.24069692194, -0.71216493845, -0.37867349386, 0.34256634116, 0.15266554058},
{0.34587788582, 0.15382640064, 0.08891279995, -0.07591084391, 0.20384661853, 0.15752188861, 0.03517634794, -0.39776241779, 0.34162652493}};
    const float pointwise_4_weights[24][24] = {{0.37322083116, 0.16944316030, -1.28477704525, 0.02502355166, -0.56366300583, -0.15178215504, -0.43302899599, 0.20375503600, -0.31133049726, -0.17877641320, -0.38494953513, -0.23123769462, -0.10642184317, -0.09480813146, -0.01560890302, -1.36668467522, -0.21158628166, -0.04439285398, -0.86499512196, -0.05017501861, -1.05086290836, -0.97425669432, 0.70047372580, 0.38862392306},
{0.10277921706, 0.20832115412, -0.32941928506, 0.29279029369, 0.14513026178, -0.34835273027, 0.25208985806, -0.52989584208, -0.44906619191, 0.37756282091, -0.32705953717, -0.47182360291, 0.49836796522, -0.91125458479, 0.08860095590, -0.18863141537, 0.18866629899, -0.44941955805, 0.11973912269, 0.35205698013, -0.23405861855, 0.50239461660, -0.09617718309, 0.15500965714},
{0.90732449293, -1.08751547337, -0.15818099678, -0.19102747738, 0.26669603586, -0.16186311841, -0.04171837494, -0.32747551799, 0.28067746758, 0.25031071901, 0.36233037710, -1.47195124626, -0.30762672424, -0.44709369540, -1.05869400501, -0.37309724092, 0.00946593378, 0.09269724786, 0.99990546703, -0.48545747995, -0.56532734632, -0.38870397210, -0.06842208654, -0.49837487936},
{0.03400653601, 0.09093300253, 0.40915650129, 0.73145002127, 0.06525631994, 0.21505935490, -0.20583902299, -0.03200671822, -0.17887598276, -0.24171139300, -0.49390628934, 0.35900524259, -0.25330582261, 0.08299438655, -0.54940545559, -0.25733390450, 0.77183210850, 0.16679501534, -0.03925731033, -0.66147124767, -0.06687712669, 0.05636098608, 0.45422148705, -0.24599906802},
{0.18745166063, -1.00081932545, 0.39282009006, 0.58257150650, -0.45171251893, 0.24257487059, 0.02000995353, -0.28943252563, 0.34942141175, -0.36955118179, -0.50862151384, -0.05206704140, -0.04654569551, 0.27352085710, 0.30788522959, 0.35788801312, -0.26781544089, -0.29334259033, -0.25216293335, 0.01046605408, 0.26745104790, 0.58467835188, 0.19381150603, -0.16286624968},
{0.26196634769, 0.29310292006, 0.02024458535, 0.56827062368, -0.44425651431, -0.85698378086, 0.28102087975, -0.38303095102, -0.15801991522, 0.12377692759, -0.48559585214, -0.89790755510, 0.63805347681, -0.27550804615, -0.13297604024, -0.12269448489, -0.53478181362, 0.43403014541, 0.19505029917, -0.31010442972, -0.12873631716, 0.19665844738, -0.43266338110, -0.08199146390},
{-0.21462662518, 0.09944392741, -0.22531610727, -1.11284041405, -1.04833209515, -0.76199698448, 0.11077289283, 0.07197731733, 0.08618596941, -0.24210116267, 0.07018314302, -0.32505941391, 0.62272429466, -0.16811910272, 0.62619704008, -0.33868247271, 0.12622515857, -0.13611511886, 0.37927502394, 0.17977900803, 0.03254400939, -1.21724355221, 0.57417339087, -0.65094554424},
{-0.58234328032, 0.26917725801, 0.00677813403, -0.39288672805, -0.31729084253, -0.78410702944, -0.15102840960, -0.21096235514, 0.49452337623, -0.22494648397, 0.24448031187, -0.55833739042, 0.16605649889, -0.51240849495, 0.50333786011, -0.68266987801, -0.30598154664, -0.44121989608, 0.01645881869, 0.40066888928, 0.27145117521, -1.42068088055, 0.11309386790, -0.37237653136},
{-0.61213517189, -0.51006317139, -0.18433611095, 0.29589581490, 0.20431852341, 0.47033861279, 0.06772567332, 0.40466412902, 0.01165786106, 0.28400540352, -0.01039384957, 0.39803647995, 0.19275131822, -0.63685321808, -0.48683479428, -0.18350854516, 0.47685369849, 0.14133347571, -0.08645257354, -0.60302644968, -0.31232684851, -0.47046118975, 0.18337960541, -0.76436603069},
{-0.94524991512, -0.50645273924, 0.16331179440, -0.07535444200, -0.63496530056, -0.40522447228, 0.66576397419, -0.54628890753, 0.13344794512, -0.09334120154, 0.10142105818, 0.28010639548, -0.17253805697, -0.02137347870, 0.08427958190, -0.02857522294, -0.50670653582, -0.41112762690, -0.63934713602, -0.10046841204, -0.38957640529, -0.07063551247, -0.35924223065, 0.16879639030},
{0.55557852983, -0.40812554955, -0.15132454038, -0.26017704606, 0.70318466425, 0.29184579849, -0.63692802191, -0.11543010175, 0.26756948233, 0.12106888741, -0.38876417279, -0.79354017973, 0.24075378478, -0.20714485645, -1.80235004425, 0.20716804266, -0.20488509536, 0.14266134799, 0.22193689644, -1.37179422379, -0.30783677101, -0.25277301669, -0.32645481825, 0.32300966978},
{-0.27092477679, -1.10766708851, -0.04677366838, -0.21048183739, -0.38719686866, 0.96370548010, 0.37323424220, 0.24500910938, 0.10649858415, -0.87869256735, 0.07806421816, -0.71557378769, 0.03144634515, -0.14651261270, 0.45159712434, -1.32399475574, -0.66266697645, 0.17586861551, -0.26327821612, 0.22976346314, 0.05292372406, 0.28142684698, 0.24993288517, -0.29112315178},
{-0.58500093222, -0.61808496714, 0.39503133297, -0.19782434404, -0.39482516050, -0.06155776232, 0.65237581730, -0.37010449171, 0.27373188734, -0.28403499722, -0.04681254923, 0.18248836696, -0.42245808244, -0.11617441475, 0.21669119596, 0.28690147400, -0.09962849319, -0.58103048801, -0.47348752618, -0.07148373872, -1.28131067753, 0.19423601031, -0.26322895288, -0.06422141194},
{-0.04794259369, 0.41785863042, 0.09828543663, -0.08887121081, -0.94107061625, 0.86053913832, 0.15843847394, 0.07352371514, -0.53551918268, -1.94181585312, -0.49911978841, -0.03095228225, 0.09477464110, -0.03354420513, -0.93981546164, -0.71172142029, 0.31962057948, -0.26951509714, 0.62230432034, 0.31355011463, -0.23652440310, -0.50525194407, 0.05517992377, -0.03141035512},
{0.30680948496, -0.08962262422, 0.16741113365, 0.23278526962, -0.02659953572, 0.71401274204, -0.15530854464, 0.53869217634, 0.34698063135, -0.46759095788, -0.49395942688, -0.72835373878, 0.46365374327, -0.17530356348, -1.05822300911, 0.26246389747, -0.70323795080, -0.53540122509, -0.02045502327, -0.65280318260, 0.23566053808, -0.60649245977, 0.14058709145, 0.30770093203},
{0.13081386685, -0.57409739494, -0.36960810423, -0.32368826866, -0.15151922405, -0.74824953079, 0.12411069125, -0.07124645263, 0.02974890918, -0.46310362220, 0.31087571383, -1.07374155521, 0.32337287068, 0.10612209886, -0.80069500208, -0.17635685205, -0.64786916971, 0.00321132201, -0.16404375434, -0.14379642904, -0.63077038527, -0.05475986749, 0.79146027565, -0.05727259815},
{-0.69528913498, -0.16659951210, -0.44336712360, -0.07985448092, 0.17760553956, 0.18009723723, 0.12741146982, -0.15182299912, 0.42669594288, -0.03286635876, 0.34917458892, -0.36990395188, -0.85739845037, -0.49137526751, 0.22544893622, -0.91975307465, 0.15577064455, -0.55741584301, -0.28646987677, -0.19852252305, -0.31609800458, 0.02472530119, 0.04242074862, 0.12349651754},
{0.52938842773, 0.27775356174, 0.16735504568, 0.16878256202, -0.96779274940, 0.22950279713, 0.00514379935, 0.07539226115, 0.47187349200, -0.30757474899, -0.44296464324, -0.27726212144, 0.06775724143, -0.34777659178, -0.37483489513, -0.73847830296, -0.25234860182, -0.21673858166, 0.24705195427, 0.00958282221, 0.13200193644, 0.51030981541, -0.35635152459, 0.24441111088},
{0.84281462431, 0.10331778228, 0.39022251964, 0.09727278352, 0.30490440130, -0.24569331110, -0.14378206432, -1.01120030880, -0.40022072196, 0.29616507888, -0.37929812074, -0.28563302755, 0.30406561494, -1.37187826633, 0.40937286615, -0.34672448039, -0.23596961796, -0.17747922242, 0.28599819541, 0.23382742703, 0.22906526923, 0.52563929558, -1.09136188030, -0.68971186876},
{-1.48328948021, 0.34028151631, 0.28194299340, -0.14524701238, -0.18228268623, -0.69067811966, 0.32846778631, -0.12386813015, -0.14464712143, 0.00670769345, -0.07853174955, -0.39365926385, 0.14567923546, -0.46184575558, -0.32015949488, -0.20498454571, 0.09168791026, -1.82375991344, 0.04874147102, -0.03114163503, 0.01300950069, 0.55002969503, 0.07536483556, 0.05168442801},
{-0.51042479277, 0.11288578808, -0.07319865376, 0.13200466335, -0.23768289387, -0.04445642605, 0.10612146556, -0.26178470254, -0.41835528612, 0.17707329988, -0.43307405710, 0.57448160648, -0.05095202476, 0.22313947976, -0.38239458203, -0.16629144549, 0.39107552171, 0.32777917385, 0.49360567331, -0.39303237200, -0.76335936785, 0.08039456606, -0.01494710520, 0.46454054117},
{0.16121168435, 0.38034674525, 0.15053172410, -0.03277315572, -0.64921563864, -0.41660696268, -0.22445870936, -1.02638816833, -0.34733793139, -0.06310188770, -0.29976937175, -0.16067868471, -0.52560645342, -0.14690816402, 0.04445659369, 0.55676418543, -0.51272463799, 0.78387993574, -0.62392705679, -0.92691731453, -1.74038338661, -0.38116762042, -0.31685557961, 0.11213136464},
{-0.74754238129, -0.01144109759, 0.25209540129, 0.62070637941, -0.14510437846, -0.62121176720, 0.25314602256, 0.28075620532, -0.18885502219, -0.55770224333, -0.21604321897, 0.67224550247, 0.14892870188, -0.48028799891, 0.01029523462, -1.79629433155, 0.16455522180, -0.35880750418, -0.05887632817, -0.63401800394, -0.14043189585, -0.72078651190, 0.35230898857, 0.00641997019},
{0.89205592871, 0.07357335836, -0.99535059929, 0.41760820150, -0.00129492837, -0.17511007190, -0.47271454334, -0.73320049047, -0.23654131591, -0.03601820394, -0.14536863565, 0.68160843849, 0.42321959138, -0.05117136613, -0.30939525366, 0.35759526491, 0.53164333105, -0.50413918495, -0.26092532277, 0.41163975000, -0.45027434826, 0.66371750832, -0.58207535744, -0.61951410770}};
    
    const float conv2d_last_weights[5][24] = {{-0.25152513385, 0.00505681755, -0.13290484250, 1.31580090523, 0.22353658080, -0.58302277327, -0.06265062839, 0.40497145057, 0.64247733355, -1.45256078243, -0.49496808648, -0.30463728309, -1.09174859524, 1.21996104717, -0.61681270599, 0.31617099047, -0.27722868323, 0.78038686514, -1.03983032703, -0.27745872736, 0.22665266693, -1.27267134190, 0.14914247394, -0.00664915517},
{-0.13727332652, 0.29596471786, 0.55705469847, -1.33630323410, 0.10836096853, 0.81967318058, 0.10454403609, -0.86962252855, -0.13977774978, -0.04121159390, -0.68586015701, 0.53970217705, -0.84458374977, -0.35027012229, 0.39259392023, 0.00424339296, -0.76868432760, 0.26970842481, 0.59002751112, 0.27047148347, -0.76417833567, 0.05129685253, 0.40656718612, 0.45587244630},
{-3.26156163216, 0.43678784370, -0.95753175020, 0.21239797771, -1.48878633976, -0.00025026864, -0.01940071024, -0.58740097284, 0.28147551417, 0.34819307923, -0.02061942406, -0.72477471828, 0.35569795966, -0.23670814931, 0.10448448360, -0.42955538630, 0.66189920902, -0.64625853300, -0.02955460176, 0.25281825662, 0.26996093988, 0.41727396846, -0.29037356377, 0.39125061035},
{-0.49899527431, 0.02234635130, -0.46214142442, 0.10711186379, 0.40814322233, -1.15190887451, 0.60654348135, 0.50797957182, -0.82464462519, 0.61539036036, 1.76759064198, 0.10305944830, 0.43367460370, -1.29919660091, 0.20929238200, 0.37807348371, 0.51264506578, -0.51407951117, -0.66778141260, -1.00822687149, -0.32752472162, 0.79255479574, -1.46672523022, -1.62858164310},
{1.95381021500, -0.75171065331, 1.00005435944, 0.67541331053, -0.05213788897, 0.03835592419, -0.90798527002, -0.08130704612, 0.67661786079, 0.36770415306, 0.00937737431, 0.31267976761, 0.81434029341, -0.46484479308, -0.90723383427, -0.76362901926, 0.44865480065, -0.24428322911, -0.28582233191, 0.11472757161, 0.18146482110, -0.46727076173, 0.55601650476, 0.07932398468}};
    const float conv2d_last_bias[5] = {-0.19438767433, 0.13850906491, -0.04917207733, -0.02067400143, 0.07381001860};

    /**
 * Multiply 3x3 kernel on single 3x3 image patch
 *
 * @param inputs
 * @param kernel
 * @param width
 */
inline float mult3x3(float *inputs, const float kernel[9], const uint16_t width) {
    const float *i1 = inputs;
    const float *i2 = inputs + width;
    const float *i3 = inputs + width + width;

    return i1[0] * kernel[0] +
           i1[1] * kernel[1] +
           i1[2] * kernel[2] +
           i2[0] * kernel[3] +
           i2[1] * kernel[4] +
           i2[2] * kernel[5] +
           i3[0] * kernel[6] +
           i3[1] * kernel[7] +
           i3[2] * kernel[8];
}
    /**
 * Zero padding 2D
 *
 * @param inputs
 * @param outputs
 * @param width
 */
void pad(float *inputs, float *outputs, uint16_t width) {
    const uint16_t paddedWidth = width + 2;
    uint16_t i = 0;
    uint16_t o = 0;

    // first row of zeros
    for (uint16_t x = 0; x < paddedWidth; x++)
        outputs[o++] = 0;

    for (uint16_t y = 0; y < width; y++) {
        outputs[o++] = 0;

        for (uint16_t x = 0; x < width; x++)
            outputs[o++] = inputs[i++];

        outputs[o++] = 0;
    }

    // last row of zeros
    for (uint16_t x = 0; x < paddedWidth; x++)
        outputs[o++] = 0;
}
    /**
 * Depthwise 3x3 convolution without ReLU
 *
 * @param input
 * @param output
 * @param kernel
 * @param width
 * @param stride
 */
void conv2d_3x3x1(float *input, float *output, const float *kernel, const uint16_t width, uint8_t stride) {
    uint16_t o = 0;

    for (uint16_t y = 0; y <= width - 3; y += stride) {
        const uint16_t offset = y * width;
        float *i = input + offset;

        for (uint16_t x = 0; x <= width - 3; x += stride) {
            output[o++] = this->mult3x3(i + x, kernel, width);
        }
    }
}
    /**
 * Depthwise 3x3 convolution with ReLU
 *
 * @param inputs
 * @param outputs
 * @param kernel
 * @param width
 * @param stride
 */
void depthwise_conv(float *inputs, float *outputs, const float *kernel, const uint16_t width, uint8_t stride) {
    uint16_t o = 0;

    for (uint16_t y = 0; y <= width - 3; y += stride) {
        const uint16_t offset = y * width;
        float *i = inputs + offset;

        for (uint16_t x = 0; x <= width - 3; x += stride) {
            float val = this->mult3x3(i + x, kernel, width);

            if (val < 0) val = 0;
            else if (val > 6) val = 6;

            outputs[o++] = val;
        }
    }
}
    /**
 * Pointwise 1x1 convolution with ReLU
 *
 * @param inputs
 * @param outputs
 * @param kernel
 * @param width
 * @param channels
 */
void pointwise_conv(float *inputs, float *outputs, const float *kernel, const uint16_t width, const uint16_t channels) {
    const uint16_t size = width * width;
    uint16_t o = 0;

    for (uint16_t y = 0; y < width; y += 1) {
        const uint16_t offset = y * width;
        for (uint16_t x = 0; x < width; x += 1) {
            float val = 0;

            for (uint16_t c = 0; c < channels; c++)
                val += inputs[(offset + x) + size * c] * kernel[c];

            if (val < 0) val = 0;
            else if (val > 6) val = 6;

            outputs[o++] = val;
        }
    }
}
    /**
 * (Global) MaxPooling
 *
 * @param inputs
 * @param outputs
 * @param width
 * @param channels
 */
void maxpool(float *inputs, float *outputs, const uint16_t width, const uint16_t channels) {
    const uint16_t size = width * width;

    for (uint16_t c = 0; c < channels; c++) {
        const uint16_t offset = size * c;
        float *in = inputs + offset;
        float greatest = in[0];

        for (uint16_t j = 1; j < size; j++)
            if (in[j] > greatest)
                greatest = in[j];

        outputs[c] = greatest;
    }
}
    /**
 * Dot product with bias
 *
 * @param inputs
 * @param outputs
 * @param kernel
 * @param bias
 * @param length
 */
void dot(float *inputs, float *outputs, const float *weights, const float bias, const uint16_t length) {
    float sum = 0;

    for (uint16_t i = 0; i < length; i++)
        sum += inputs[i] * weights[i];

    outputs[0] = sum + bias;
}
    /**
 * Softmax activation
 *
 * @param inputs
 * @param outputs
 * @param numOutputs
 */
void softmax(float *inputs, float *outputs, uint16_t numOutputs) {
    float sum = 0;

    for (uint16_t i = 0; i < numOutputs; i++) {
        const float e = exp(inputs[i]);
        outputs[i] = e;
        sum += e;
    }

    for (uint16_t i = 0; i < numOutputs; i++)
        outputs[i] /= sum;
}
};