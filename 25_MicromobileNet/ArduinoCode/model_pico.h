/**
 * "Compiled" implementation of modified MobileNet
 */
class PicoMobileNet {
public:
    const uint16_t numInputs = 9216;
    const uint16_t numOutputs = 5;
    float outputs[5];
    float arena[6936];
    uint16_t output;
    float proba;

    /**
     *
     */
    PicoMobileNet() : output(0), proba(0) {
        for (uint16_t i = 0; i < numOutputs; i++)
            outputs[i] = 0;
    }

    /**
     *
     * @param input
     */
    uint16_t predict(float *input) {
        float *ping = arena;
        float *pong = arena + 3468;

        // conv2d (0)
        for (int16_t d = 0; d < 3; d++)
            this->conv2d_3x3x1(input, ping + 32 * 32 * d, conv2d_0_weights[d], 96, 3);

        
            
            // padding (1)
            for (int16_t d = 0; d < 3; d++)
                this->pad(ping + 32 * 32 * d, pong + 34 * 34 * d, 32);

            memcpy(ping, pong, sizeof(float) * 34 * 34 * 3);
            

            // depthwise (1)
            for (int16_t d = 0; d < 3; d++)
                this->depthwise_conv(ping + 34 * 34 * d, pong + 16 * 16 * d, depthwise_1_weights[d], 34, 2);

            // pointwise (1)
            for (int16_t d = 0; d < 6; d++)
                this->pointwise_conv(pong, ping + 16 * 16 * d, pointwise_1_weights[d], 16, 3);
        
            
            // padding (2)
            for (int16_t d = 0; d < 6; d++)
                this->pad(ping + 16 * 16 * d, pong + 18 * 18 * d, 16);

            memcpy(ping, pong, sizeof(float) * 18 * 18 * 6);
            

            // depthwise (2)
            for (int16_t d = 0; d < 6; d++)
                this->depthwise_conv(ping + 18 * 18 * d, pong + 8 * 8 * d, depthwise_2_weights[d], 18, 2);

            // pointwise (2)
            for (int16_t d = 0; d < 12; d++)
                this->pointwise_conv(pong, ping + 8 * 8 * d, pointwise_2_weights[d], 8, 6);
        
            
            // padding (3)
            for (int16_t d = 0; d < 12; d++)
                this->pad(ping + 8 * 8 * d, pong + 10 * 10 * d, 8);

            memcpy(ping, pong, sizeof(float) * 10 * 10 * 12);
            

            // depthwise (3)
            for (int16_t d = 0; d < 12; d++)
                this->depthwise_conv(ping + 10 * 10 * d, pong + 4 * 4 * d, depthwise_3_weights[d], 10, 2);

            // pointwise (3)
            for (int16_t d = 0; d < 24; d++)
                this->pointwise_conv(pong, ping + 4 * 4 * d, pointwise_3_weights[d], 4, 12);
        

        this->maxpool(ping, pong, 4, 24);

        for (uint16_t d = 0; d < numOutputs; d++)
            this->dot(pong, ping + d, conv2d_last_weights[d], conv2d_last_bias[d], 24);

        this->softmax(ping, outputs, numOutputs);

        return this->argmax();
    }

    /**
 * Get index of max output
 */
uint16_t argmax() {
    this->output = 0;
    this->proba = outputs[0];

    for (uint16_t i = 1; i < numOutputs; i++) {
        if (outputs[i] > this->proba) {
            this->proba = outputs[i];
            this->output = i;
        }
    }

    return this->output;
}

protected:
    const float conv2d_0_weights[3][9] = {{0.19621533155, 0.43743759394, -0.34715706110, 0.51107120514, -0.54695791006, 0.30466121435, 0.33115294576, 0.39675801992, 0.36325737834},
{0.04029223695, -0.35173237324, 0.07128407061, -0.49774280190, 0.23902156949, 0.25526866317, 0.02499570698, 0.33645272255, 0.19055819511},
{-0.49780330062, 0.13872791827, 0.04516880959, 0.15426848829, -0.15891495347, 0.14053180814, 0.03631484136, -0.13520973921, 0.18104979396}};
    
    const float depthwise_1_weights[3][9] = {{-0.29183703661, 0.39981365204, -0.35359200835, -0.20524215698, 0.32832351327, 0.50042033195, -0.14898720384, 0.16411226988, -0.16010969877},
{0.09481292963, -0.23329772055, -0.32500255108, 0.04480047151, 0.15958753228, 0.25107192993, 0.39623406529, 0.08083390445, 0.10466960073},
{-0.16388763487, -0.24481743574, -0.23335869610, 0.04845298827, 0.19227707386, 0.38783901930, -0.02862224169, -0.28872501850, -0.15588475764}};
    const float pointwise_1_weights[6][3] = {{-0.24414993823, 0.59533482790, -1.27011322975},
{0.72884339094, 0.63912087679, -0.87658751011},
{-0.06729400158, -0.42597457767, -0.23890978098},
{-0.06872367859, -0.61360019445, 0.84330093861},
{-0.93988370895, 0.93878120184, -0.00131986849},
{-0.75512754917, 0.14915734529, 0.49659526348}};
    
    const float depthwise_2_weights[6][9] = {{0.39796617627, 0.02950194292, -0.12331044674, 0.51404005289, -0.12324244529, -0.07885746658, 0.44471120834, 0.63117408752, 0.07026471943},
{0.14766584337, -0.04767996073, 0.34317815304, 0.07184316218, -0.05012534559, 0.16396491230, 0.12220817804, 0.36598017812, -0.06615599990},
{-0.07031227648, 0.20905897021, 0.06868487597, -0.25612720847, -0.29655507207, -0.02700406313, 0.16156789660, 0.01627448201, 0.08774316311},
{0.40618681908, 0.40308368206, -0.03308099508, -0.41579011083, 0.12653137743, 0.08570937067, 0.50585591793, -0.14151088893, 0.08605059981},
{-0.36654517055, 0.50635093451, -0.24365432560, 0.13712337613, 0.62686663866, 0.03500242159, -0.23684573174, -0.05904700607, 0.36408421397},
{-0.19184625149, -0.27242076397, -0.03345403075, -0.00088161230, -0.29172331095, -0.05009999871, -0.09066441655, -0.12675319612, -0.30304586887}};
    const float pointwise_2_weights[12][6] = {{0.76593708992, 0.42672634125, -0.01348716021, 0.52582043409, -0.14164076746, 0.38895928860},
{0.34958153963, -0.10476998985, 0.39803779125, 0.74235862494, 0.19973979890, 0.47363257408},
{-0.31390991807, 0.42215287685, -0.25096562505, -0.33419027925, 0.22888177633, 0.25421583652},
{-0.27542364597, -0.21442282200, -0.17046773434, 0.68965542316, 0.50799345970, 0.24914312363},
{-0.67033588886, -0.34130185843, -0.18122929335, 0.45594885945, 1.02782142162, -0.12404671311},
{0.72553563118, 1.10794973373, 0.16675513983, 0.05923686922, -0.71392512321, 0.44983053207},
{0.58849781752, -0.11419487000, 0.50364410877, 0.70754253864, -0.45878407359, 0.54121840000},
{-0.67731511593, -0.39200222492, 0.24903398752, 1.00368416309, 0.43451172113, -0.28390014172},
{0.18679651618, 0.54974162579, 0.02263385057, -0.53084969521, -0.79505747557, -0.31197711825},
{-0.21697594225, -0.05622131005, -0.12092339993, 0.87665826082, 0.22328382730, 0.44032180309},
{0.06057367846, 0.94849914312, 0.11913162470, -0.97193551064, 0.26491713524, -0.36079269648},
{0.60420918465, -0.34488314390, 0.52353322506, 0.76185238361, -0.36259150505, 0.08723688126}};
    
    const float depthwise_3_weights[12][9] = {{0.42288476229, 0.26799231768, -0.16553217173, -0.14350274205, -0.28888872266, -0.01632950827, -0.30224141479, -0.17364254594, 0.19767157733},
{0.25927451253, 0.25998792052, -0.50455445051, 0.15104377270, 0.02646641992, 0.20948554575, -0.10503448546, 0.07972813398, 0.09077952057},
{0.02806363814, 0.16355848312, 0.27581188083, 0.09873295575, 0.08522713184, 0.45935139060, -0.29994133115, 0.23782773316, 0.19348885119},
{-0.12880960107, 0.59222203493, 0.09554712474, 0.01084965281, -0.12145294994, 0.12317029387, 0.00159918785, 0.48302286863, -0.16097384691},
{-0.53987413645, 0.40928837657, -0.19946968555, 0.10779712349, 0.31357097626, 0.32946553826, 0.00422042655, 0.40488547087, -0.25721725821},
{-0.44306993484, -0.29883226752, 0.38596320152, 0.00570681319, -0.19508762658, -0.28450524807, 0.19150106609, -0.12448969483, 0.28232517838},
{0.62696230412, -0.15990272164, 0.19749969244, 0.02125079744, 0.20801351964, -0.02222198062, -0.19071064889, 0.16077795625, 0.17360211909},
{0.33854451776, -0.32308182120, -0.13396635652, -0.44268059731, -0.27519154549, 0.10483185202, -0.76074987650, 0.26250594854, -0.04314922914},
{-0.18281735480, 0.39357542992, 0.59591490030, -0.04169969633, -0.07900963724, 0.14757332206, -0.02750667743, -0.18356683850, 0.34420716763},
{-0.12262082100, -0.66451895237, 0.34008845687, -0.19640129805, 0.45753845572, 0.14023865759, -0.07526526600, 0.23539678752, 0.20647770166},
{0.38598778844, 0.12485475093, -0.07936172932, 0.14560967684, -0.43039473891, 0.19786535203, -0.54037076235, -0.04343012348, -0.14623899758},
{0.08708858490, -0.78409498930, 0.32233047485, 0.48267725110, -0.14651760459, -0.04358961061, 0.52615177631, 0.14678867161, 0.13914373517}};
    const float pointwise_3_weights[24][12] = {{0.41051954031, 0.01339407451, 0.17235049605, -0.17498946190, 0.09145856649, 0.23525828123, -0.41769596934, -0.38567709923, -0.84686422348, 0.11787284911, -0.25619438291, 0.10526259989},
{-1.06930899620, 0.10489072651, 0.10103087872, 0.28422749043, -0.25826740265, 0.41901698709, 0.33086094260, 0.51757979393, -0.19770649076, -0.90315866470, 0.05819074810, -0.79303473234},
{-0.54370880127, -1.02062821388, 0.14006693661, -1.21090638638, -1.04654693604, -0.58263528347, -0.55498105288, -0.32988288999, 0.13996849954, -0.69834518433, 0.12676747143, -0.30647820234},
{0.35600951314, -0.71797859669, 0.16606646776, -1.31607937813, -0.46729636192, 0.67292577028, -0.21033450961, -0.22024106979, -0.00461263303, -0.43924051523, 0.32520630956, -0.84414315224},
{-1.35891866684, 0.46951770782, -0.03084754013, 0.00347185368, -0.41697636247, 0.26186189055, 0.52625942230, 0.13795484602, -0.40371733904, -0.18143667281, 0.03976718336, -0.60969281197},
{-0.55882537365, 0.51708799601, -0.74580651522, 0.03484789282, -0.00349560054, 0.12782527506, 0.10040307790, -1.01465117931, -0.14741629362, -0.61803734303, 0.62735682726, 0.21122138202},
{-0.13373745978, 0.28304466605, -0.79354375601, 0.21174913645, -0.12461242080, -1.02999746799, 0.27092596889, -0.08363082260, 0.49172040820, -0.41154575348, 0.22091101110, -0.18326392770},
{0.41819721460, 0.18426591158, -0.52266907692, 0.15472617745, 0.15442611277, 0.41398248076, -0.74645209312, -0.14919906855, -0.12804307044, 0.08376841992, 0.72158211470, -0.12984381616},
{0.12291966379, -0.08686064929, -0.63432413340, 0.35452923179, -0.41099968553, -0.44185334444, 0.34677174687, 0.13130962849, 0.33400183916, 0.02533307672, 0.11233924329, -0.00406001229},
{-0.84875863791, -0.22770480812, 0.30538001657, -0.31570890546, -0.45646670461, 0.02698013932, -0.14927773178, 0.48519620299, -0.06456363201, -0.43754622340, -0.44459533691, -0.21912312508},
{-0.10927248001, -0.19705365598, -0.26778137684, -0.46454805136, 0.57397007942, -0.19285236299, 0.02000427060, 0.23189553618, -0.75906991959, 0.22552408278, 0.24891294539, -0.69096684456},
{0.59200739861, 0.40826922655, -0.51326936483, -0.19443050027, -0.07588675618, 0.22589306533, -0.07478505373, -0.11683356017, -1.36296641827, -0.49043843150, 0.52589702606, 0.34616097808},
{-0.44498035312, -0.16588857770, -0.25708234310, -0.12244611233, 0.18744096160, 0.65947383642, -0.84857624769, 0.78662854433, 0.08851654083, -0.09994222969, 0.64238005877, -0.49863719940},
{-1.16387891769, 0.59876918793, 0.00185904920, -0.57589650154, -0.50397819281, 0.53499352932, 0.00884982292, 0.30843588710, -0.50450128317, -0.17429500818, -0.52778804302, 0.29305946827},
{-0.20535585284, 0.32324174047, -0.69774419069, 0.07620540261, -0.21904845536, -0.05629428849, -0.53219431639, -0.14621901512, 0.45343104005, 0.36084598303, -0.38720312715, -0.11364609003},
{0.68613213301, -0.46263688803, -0.39441919327, -0.07207849622, -0.06178740785, 0.30882403255, -0.78616255522, 0.89213198423, 0.23705635965, 0.28881114721, -0.13089054823, -0.28834065795},
{-0.99828094244, 0.19291077554, 0.02541987039, 0.52215749025, -0.46330046654, -0.53555142879, -0.95290911198, -0.84507954121, -0.28692838550, 0.15935963392, -0.22482413054, -1.61156475544},
{-0.36442711949, -1.34867680073, 0.28493085504, -0.91944319010, -0.85823523998, -0.67922085524, -1.04612267017, -0.25004154444, 0.05428494886, -0.92369717360, 0.40723511577, -0.32898280025},
{0.17625817657, 0.15538716316, -0.48252996802, -0.51957023144, 0.69349706173, -1.28281092644, -0.29736626148, -0.80933415890, 0.20368663967, 0.08890675008, -0.11819725484, -0.03814198822},
{-0.91465085745, 0.28574144840, -0.11642003804, 0.09886288643, 0.02717442438, -0.47427055240, 0.43701148033, -0.25368380547, 0.01161288843, -0.63172155619, -0.05604239181, -1.07989978790},
{0.22533996403, 0.54351294041, 0.14662846923, -0.28720551729, -0.82669621706, -0.84036260843, -0.00217036391, 0.15471322834, -0.40610778332, -0.28444576263, 0.30264765024, -0.48415154219},
{-0.40639561415, -0.09036999196, 0.08264443278, 0.25691348314, 0.18702569604, -0.08176665753, -0.11501562595, 0.46356382966, -0.23814398050, -1.29134845734, -0.30844640732, 0.08893509954},
{-0.10847903043, -0.23083886504, -0.04588835314, 0.38620153069, -0.76949661970, 0.35396298766, 0.21008798480, 0.68706184626, -0.32915693521, -0.30413088202, 0.05252442136, 0.21286241710},
{-0.24921029806, -0.08743440360, 0.18642362952, 0.32668277621, -0.32805597782, 0.03010052443, 0.14695569873, 0.03479517251, -1.12839996815, 0.14520598948, 0.25947043300, -0.64035278559}};
    
    const float conv2d_last_weights[5][24] = {{0.30193835497, -0.28699496388, -0.10968136042, 0.20281404257, -0.04749909788, 0.52429628372, -0.47074908018, 0.44487419724, -0.72586119175, 0.41636753082, 0.06980979443, 0.06373929232, 0.56999832392, -0.62062883377, 0.59907704592, 0.66088670492, -0.27591487765, 0.09227822721, 0.09725899994, -0.54967123270, -0.38225701451, 0.13308918476, 0.47411897779, -0.26101717353},
{-0.13798218966, -0.44685387611, 0.68217664957, 0.29438194633, -0.43596008420, 0.50857418776, -0.12420275807, 0.42496713996, 0.40322446823, 0.46634575725, 0.34207570553, 1.12170314789, -0.06222465634, -0.58449417353, 0.11617300659, 0.36818677187, -0.74715650082, 0.44762811065, -0.72376745939, -0.62686014175, -0.20292232931, -0.36811885238, -0.70461344719, -0.32818406820},
{0.44258198142, 0.01695890911, -0.12460933626, -0.03612039238, -0.42183959484, -0.20071914792, -0.02841917425, 0.21508607268, -0.10506067425, 0.07456614822, 0.13357603550, 0.38887354732, 0.72515946627, 0.08643832803, -0.71926200390, 0.16645422578, 0.72919321060, -0.21172164381, 0.32113102078, -0.43085938692, -0.21079570055, 0.33122318983, -0.01347187161, -0.16126725078},
{-0.24981951714, 0.54907786846, -0.49620562792, -0.67093729973, 0.26562365890, -0.94488817453, 0.70901393890, -0.64562416077, 0.42082139850, -0.43433833122, 0.81243824959, -1.28145503998, -0.35122576356, 0.46608516574, 0.62853956223, -0.50699174404, 0.33079886436, -0.54966628551, -0.13089019060, 0.49385133386, 0.39066553116, -0.01675762609, 0.69971996546, -0.22705279291},
{0.82662296295, 0.53844374418, -0.42199581861, -0.68001717329, 0.02418354899, 0.15932996571, 0.17197597027, -0.20951503515, -0.03587180749, -0.20819793642, -0.99766123295, -0.47765797377, -0.35870572925, 0.11003669351, -0.47595086694, 0.77197420597, -0.73405337334, -0.30950087309, 0.24722899497, 0.04255159199, 0.74062067270, 0.35449329019, -0.19459313154, 0.36659827828}};
    const float conv2d_last_bias[5] = {-0.03397755697, 0.45145961642, -0.08531283587, -0.41885682940, 0.03166703880};

    /**
 * Multiply 3x3 kernel on single 3x3 image patch
 *
 * @param inputs
 * @param kernel
 * @param width
 */
inline float mult3x3(float *inputs, const float kernel[9], const uint16_t width) {
    const float *i1 = inputs;
    const float *i2 = inputs + width;
    const float *i3 = inputs + width + width;

    return i1[0] * kernel[0] +
           i1[1] * kernel[1] +
           i1[2] * kernel[2] +
           i2[0] * kernel[3] +
           i2[1] * kernel[4] +
           i2[2] * kernel[5] +
           i3[0] * kernel[6] +
           i3[1] * kernel[7] +
           i3[2] * kernel[8];
}
    /**
 * Zero padding 2D
 *
 * @param inputs
 * @param outputs
 * @param width
 */
void pad(float *inputs, float *outputs, uint16_t width) {
    const uint16_t paddedWidth = width + 2;
    uint16_t i = 0;
    uint16_t o = 0;

    // first row of zeros
    for (uint16_t x = 0; x < paddedWidth; x++)
        outputs[o++] = 0;

    for (uint16_t y = 0; y < width; y++) {
        outputs[o++] = 0;

        for (uint16_t x = 0; x < width; x++)
            outputs[o++] = inputs[i++];

        outputs[o++] = 0;
    }

    // last row of zeros
    for (uint16_t x = 0; x < paddedWidth; x++)
        outputs[o++] = 0;
}
    /**
 * Depthwise 3x3 convolution without ReLU
 *
 * @param input
 * @param output
 * @param kernel
 * @param width
 * @param stride
 */
void conv2d_3x3x1(float *input, float *output, const float *kernel, const uint16_t width, uint8_t stride) {
    uint16_t o = 0;

    for (uint16_t y = 0; y <= width - 3; y += stride) {
        const uint16_t offset = y * width;
        float *i = input + offset;

        for (uint16_t x = 0; x <= width - 3; x += stride) {
            output[o++] = this->mult3x3(i + x, kernel, width);
        }
    }
}
    /**
 * Depthwise 3x3 convolution with ReLU
 *
 * @param inputs
 * @param outputs
 * @param kernel
 * @param width
 * @param stride
 */
void depthwise_conv(float *inputs, float *outputs, const float *kernel, const uint16_t width, uint8_t stride) {
    uint16_t o = 0;

    for (uint16_t y = 0; y <= width - 3; y += stride) {
        const uint16_t offset = y * width;
        float *i = inputs + offset;

        for (uint16_t x = 0; x <= width - 3; x += stride) {
            float val = this->mult3x3(i + x, kernel, width);

            if (val < 0) val = 0;
            else if (val > 6) val = 6;

            outputs[o++] = val;
        }
    }
}
    /**
 * Pointwise 1x1 convolution with ReLU
 *
 * @param inputs
 * @param outputs
 * @param kernel
 * @param width
 * @param channels
 */
void pointwise_conv(float *inputs, float *outputs, const float *kernel, const uint16_t width, const uint16_t channels) {
    const uint16_t size = width * width;
    uint16_t o = 0;

    for (uint16_t y = 0; y < width; y += 1) {
        const uint16_t offset = y * width;
        for (uint16_t x = 0; x < width; x += 1) {
            float val = 0;

            for (uint16_t c = 0; c < channels; c++)
                val += inputs[(offset + x) + size * c] * kernel[c];

            if (val < 0) val = 0;
            else if (val > 6) val = 6;

            outputs[o++] = val;
        }
    }
}
    /**
 * (Global) MaxPooling
 *
 * @param inputs
 * @param outputs
 * @param width
 * @param channels
 */
void maxpool(float *inputs, float *outputs, const uint16_t width, const uint16_t channels) {
    const uint16_t size = width * width;

    for (uint16_t c = 0; c < channels; c++) {
        const uint16_t offset = size * c;
        float *in = inputs + offset;
        float greatest = in[0];

        for (uint16_t j = 1; j < size; j++)
            if (in[j] > greatest)
                greatest = in[j];

        outputs[c] = greatest;
    }
}
    /**
 * Dot product with bias
 *
 * @param inputs
 * @param outputs
 * @param kernel
 * @param bias
 * @param length
 */
void dot(float *inputs, float *outputs, const float *weights, const float bias, const uint16_t length) {
    float sum = 0;

    for (uint16_t i = 0; i < length; i++)
        sum += inputs[i] * weights[i];

    outputs[0] = sum + bias;
}
    /**
 * Softmax activation
 *
 * @param inputs
 * @param outputs
 * @param numOutputs
 */
void softmax(float *inputs, float *outputs, uint16_t numOutputs) {
    float sum = 0;

    for (uint16_t i = 0; i < numOutputs; i++) {
        const float e = exp(inputs[i]);
        outputs[i] = e;
        sum += e;
    }

    for (uint16_t i = 0; i < numOutputs; i++)
        outputs[i] /= sum;
}
};